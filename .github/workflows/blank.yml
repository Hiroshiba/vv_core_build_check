name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_msvc:
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-18.04 ]
        include:
          - os: windows-2019
            library_path: Release/check.dll
          - os: ubuntu-18.04
            library_path: ubuntu-18.04
    
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      
      - run: mkdir download
      
#       # libtorch
#       - uses: actions/cache@v2
#         id: libtorch-unzip-cache
#         with:
#           key: libtorch-unzip-cache
#           path: download/libtorch
          
#       - if: steps.libtorch-unzip-cache.outputs.cache-hit != 'true'
#         shell: bash
#         run: |
#           curl https://download.pytorch.org/libtorch/cu111/libtorch-win-shared-with-deps-1.9.0%2Bcu111.zip \
#             > download/libtorch.zip
#           unzip download/libtorch.zip -d download/
      
#       # CUDA
#       - uses: Jimver/cuda-toolkit@v0.2.4
#         id: cuda-toolkit
#         with:
#           method: network
#           cuda: '11.1.1'

#       # CUDNN
#       - uses: actions/cache@v2
#         id: cudnn-unzip-cache
#         with:
#           key: cudnn-unzip-cache
#           path: download/cudnn
          
#       - if: steps.cudnn-unzip-cache.outputs.cache-hit != 'true'
#         shell: bash
#         run: |
#           curl https://developer.download.nvidia.com/compute/redist/cudnn/v8.0.5/cudnn-11.1-windows-x64-v8.0.5.39.zip \
#             > download/cudnn.zip
#           unzip download/cudnn.zip -d download/cudnn

#       - shell: bash
#         run: |
#           cp -r download/cudnn/cuda/* "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
#           ls "${{steps.cuda-toolkit.outputs.CUDA_PATH}}"

      # Build
      - if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1
      
      - if: startsWith(matrix.os, 'ubuntu')
        uses: jwlawson/actions-setup-cmake@v1.9

      - name: build
        run: |
          cmake -DCMAKE_PREFIX_PATH=download/libtorch .
          cmake --build . --config Release
        
      - shell: bash
        run: ls
          
      # Upload
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-library
          path: ${{ matrix.library_path }}
          retention-days: 1


